import Head from 'next/head';
import Image from 'next/image';

// get contract ABIs
import reNftAbi from '/abis/RealEstate.json';
import escrowAbi from '/abis/Escrow.json';

// blockchain networks config
import config from '/congfig.json';

import { ethers } from 'ethers';
import { useEffect, useState } from 'react';
// components
import Navigation from '../components/Navigation';
import Search from '../components/Search';

export default function Home() {
	const [provider, setProvider] = useState(null);
	const [escrow, setEscrow] = useState(null);

	const [account, setAccount] = useState(null);
	const [homesForSale, setHomesForSale] = useState(null);

	const loadBlockchainData = async () => {
		const provider = new ethers.providers.Web3Provider(window.ethereum);
		setProvider(provider);

		// programatically gets chainId & contract address from config file based on network being used
		const network = await provider.getNetwork();

		let nftContractAddress = config[network.chainId].reNftContract.address;
		let escrowContractAddress = config[network.chainId].escrowContract.address;

		// get real estate contract
		const ReNftContract = new ethers.Contract(
			nftContractAddress,
			reNftAbi,
			provider
		);
		const totalSupply = await ReNftContract.totalSupply();
		const homes = [];

		for (let i = 1; i <= totalSupply; i++) {
			const uri = await ReNftContract.tokenURI(i);
			const response = await fetch(uri);
			const metadata = await response.json();

			homes.push(metadata);
		}

		setHomesForSale(homes);

		// get escrow contract
		const EscrowContract = new ethers.Contract(
			escrowContractAddress,
			escrowAbi,
			provider
		);
		setEscrow(EscrowContract);

		window.ethereum.on('accountsChanged', async () => {
			const accounts = await window.ethereum.request({
				method: 'eth_requestAccounts',
			});

			// 'getAddress' function injects checksum to show lower & capital letters in wallet address
			const account = ethers.utils.getAddress(accounts[0]);

			setAccount(account);
		});
	};

	useEffect(() => {
		loadBlockchainData();
	}, []);

	console.log(homesForSale);
	return (
		<div>
			<Head>
				<title>Buy Homes Web3</title>
				<meta name='description' content='Generated by create next app' />
				<link rel='icon' href='/favicon.ico' />
			</Head>

			<main>
				<Navigation account={account} setAccount={setAccount} />
				<Search />
				<div className='cards__section'>
					<h3>Welcome to Web3 Homes</h3>
					<br />
					<div className='cards'>
						{!homesForSale ? (
							<p>no homes listed</p>
						) : (
							homesForSale.map((home, index) => (
								<div className='card' key={index}>
									<div>
										<Image
											src={home.image}
											width={348}
											height={200}
											alt='home'
										/>
									</div>
									<div className='card__info'>
										<h4>{home.attributes[0].value} ETH</h4>
										<p>
											<strong>{home.attributes[2].value}</strong> beds |
											<strong>{home.attributes[3].value}</strong> baths |
											<strong>{home.attributes[4].value}</strong> sqft
										</p>
										<p>{home.address}</p>
									</div>
								</div>
							))
						)}
					</div>
				</div>
			</main>
		</div>
	);
}
